package com.xll.xc.seller.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.xll.xc.seller.Dao.ItemDao;
import com.xll.xc.seller.Dao.OrderDao;
import com.xll.xc.seller.Dao.OrderItemDao;
import com.xll.xc.seller.Dao.PayLogDao;
import com.xll.xc.seller.Dao.SellerDao;
import com.xll.xc.seller.Dao.ShopDao;
import com.xll.xc.seller.Pojo.Item;
import com.xll.xc.seller.Pojo.Order;
import com.xll.xc.seller.Pojo.OrderItem;
import com.xll.xc.seller.Pojo.PayLog;
import com.xll.xc.seller.Pojo.Seller;
import com.xll.xc.seller.Pojo.Shop;
import com.xll.xc.seller.Pojo.TimeEntity;

import io.jsonwebtoken.Claims;
import util.IdWorker;
import util.JwtUtil;

@Service
@Transactional
public class SellerCenterService {

	@Autowired
	private SellerDao sellerDao;
	@Autowired
	private JwtUtil jwtUtil;
	@Autowired
	private ItemDao itemDao;
	@Autowired
	private ShopDao  shopDao;
	@Autowired
	private IdWorker idWorker;
	@Autowired
	private PayLogDao payLogDao;
	@Autowired
	private OrderDao orderDao;
	@Autowired
	private OrderItemDao orderItemDao;
	
	public Seller findSellerByEnc(String enc) {
		Claims claims = jwtUtil.parseJWT(enc);
		String userId = claims.getId();
		return sellerDao.findBySeller_id(userId);
	}	
	
	public Page<Item> findItemBySellerId(String enc,int page,int size){
		Pageable pageable = PageRequest.of(page-1, size);
		Claims claims = jwtUtil.parseJWT(enc);
		String sellerId = claims.getId();
		return itemDao.findBySeller_id(sellerId, pageable);
	}
	
	public Page<Shop> findShopBySellerId(String enc,int page,int size){
		Pageable pageable = PageRequest.of(page-1, size);
		Claims claims = jwtUtil.parseJWT(enc);
		return shopDao.findShopBySellerId(claims.getId(),pageable);
	}
	
	public void addShop(Shop shop,String enc) {
		Claims claims = jwtUtil.parseJWT(enc);
		shop.setId(idWorker.nextId()+"");
		shop.setSeller_id(claims.getId());
		shop.setStatus("1");
		shopDao.save(shop);
	}
	
	public Page<Item> search(String enc,String key,int page,int size){
		Pageable pageable = PageRequest.of(page-1, size);
		Claims claims = jwtUtil.parseJWT(enc);
		String seller_id = claims.getId();
		return itemDao.search(seller_id, key,pageable);
	}
	
	public void Export(String enc,TimeEntity timeEntity) {
		Claims claims = jwtUtil.parseJWT(enc);
		String seller_id = claims.getId();
		List<PayLog> list = payLogDao.findBySellerId(seller_id, timeEntity.getStartTime().toString(), timeEntity.getEndTime().toString());
		
		List<String> data = new ArrayList<>();
		for(int i=0;i<list.size();i++) {
			data.add(list.get(i).getOut_trade_no());
			data.add(String.valueOf(list.get(i).getCreate_time()));
			data.add(list.get(i).getTransaction_id());
			data.add(list.get(i).getOrder_list());
			data.add(String.valueOf(list.get(i).getTotal_fee()));
		}
		
		try {
			new POIService().DBToExcel(data);
		} catch (Exception e) {

		}
	}
	
	public List<Order> findOrderByEnc(String enc) {
		Claims claims = jwtUtil.parseJWT(enc);
		String sellerid = claims.getId();
		return orderDao.findBySeller_id(sellerid);
	}
	
	public List<OrderItem> findOrderItemByEnc(String enc){
		List<OrderItem> list = new ArrayList<>();
		Claims claims = jwtUtil.parseJWT(enc);
		String seller_id = claims.getId();
		List<Order> orderList = orderDao.findBySeller_id(seller_id);
		if(orderList == null) {
			return null;
		}else {
			for(int i =0;i<orderList.size();i++) {
				list.addAll(orderItemDao.findByOrder_id(orderList.get(i).getOrder_id()));
			}
		}
		return list;
	}
	
	public Map<String, List<OrderItem>> findOrderMapByEnc(String enc){
		Map<String, List<OrderItem>> map = new HashMap<>();
		Claims claims = jwtUtil.parseJWT(enc);
		String sellerid = claims.getId();
		List<Order> list = orderDao.findBySeller_id(sellerid);
		for(int i=0;i<list.size();i++) {
			map.put(list.get(i).getOrder_id(), orderItemDao.findByOrder_id(list.get(i).getOrder_id()));
		}
		return map;
	}
	
	public Map<String, List<OrderItem>> findOrderMapByEncAndKey(String enc,String key){
		Map<String, List<OrderItem>> map = new HashMap<>();
		Claims claims = jwtUtil.parseJWT(enc);
		String sellerId = claims.getId();
		List<Order> list = orderDao.findBySeller_idAndOrder_id(sellerId, key);
		for(int i=0;i<list.size();i++) {
			map.put(list.get(i).getOrder_id(), orderItemDao.findByOrder_id(list.get(i).getOrder_id()));
		}
		return map;
	}
	
}
