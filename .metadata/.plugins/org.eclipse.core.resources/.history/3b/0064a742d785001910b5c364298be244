package com.xll.xc.pay.Controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.domain.AlipayTradePagePayModel;
import com.alipay.api.request.AlipayTradePagePayRequest;
import com.xll.xc.pay.Client.CartClient;
import com.xll.xc.pay.Config.AlipayProperties;
import com.xll.xc.pay.Pojo.Order;
import com.xll.xc.pay.Pojo.TotalResult;
import com.xll.xc.pay.Service.OrderItemService;
import com.xll.xc.pay.Service.OrderService;

import io.jsonwebtoken.Claims;
import util.IdWorker;
import util.JwtUtil;


@Controller
@RequestMapping("/alipay/page")
public class AlipayPagePayController {
	@Autowired
    private AlipayProperties alipayProperties;

    @Autowired
    private AlipayClient alipayClient;

    @Autowired
    private AlipayController alipayController;

    @Autowired
    private JwtUtil jwtUtil;
    
    @Autowired
    private OrderService orderService;
    
    @Autowired
    private CartClient cartClient;
    
    @Autowired
    private IdWorker idWorker;
    
    @Autowired
    private OrderItemService orderItemService;
    
    @PostMapping("/gotoPayPage")
    public void gotoPayPage(HttpServletRequest request,HttpServletResponse response) throws AlipayApiException, IOException {
    	
    	// 订单模型
        String productCode = "FAST_INSTANT_TRADE_PAY";
        AlipayTradePagePayModel model = new AlipayTradePagePayModel();
        model.setOutTradeNo(UUID.randomUUID().toString());
        model.setSubject("订单号：" + request.getParameter("WIDsubject"));
        model.setTotalAmount(request.getParameter("WIDtotal_amount"));
        model.setBody("订单，共"+ request.getParameter("WIDtotal_amount") +"元");
        model.setProductCode(productCode);
       
        String shipping_content="";
        String[] str =  request.getParameterValues("WIDbody");
        for(int i =0;i<str.length;i++) {
        	shipping_content = shipping_content + str[i].trim() + " ";
        }
        
        
        Claims claims = jwtUtil.parseJWT(request.getParameter("enc"));
        String level = "";
        if(claims.get("roles").equals("user")) {
        	level = "1";
        }
        if(claims.get("roles").equals("seller")) {
        	level = "2";
        }
        
        Order order = new Order();
    	order.setOrder_id(request.getParameter("WIDsubject"));
    	order.setPayment(new BigDecimal(request.getParameter("WIDtotal_amount")));
    	order.setPayment_type("1");
    	order.setPost_fee("0");
    	order.setStatus("2");
    	order.setCreate_time(new Timestamp(new Date().getTime()));
    	order.setUpdate_time(new Timestamp(new Date().getTime()));
    	order.setPayment_time(new Timestamp(new Date().getTime()));
    	order.setConsign_time(new Timestamp(new Date().getTime()));
    	order.setEnd_time(new Timestamp(new Date().getTime()));
    	order.setShipping_name("订单号：" + request.getParameter("WIDsubject"));
    	order.setShipping_code(request.getParameter("WIDsubject"));
    	order.setUser_id(claims.getId());
    	order.setBuyer_nick(claims.getSubject());
    	order.setSource_type("2");
    	order.setShipping_content(shipping_content);
    	orderService.addOrder(order);
    	
    	List<TotalResult> list = (List<TotalResult>) cartClient.showCartList(request.getParameter("enc")).getData();
    	
    	System.err.println(list.size());
    	System.err.println(list.get(0).toString());
    	
    	for(int i =0;i<list.size();i++) {
    		System.err.println(list.get(i).getTitle());
    		/*OrderItem orderItem = new OrderItem();
    		orderItem.setId(idWorker.nextId() + "");
    		orderItem.setItem_id(list.get(i).getId());
    		orderItem.setGoods_id(list.get(i).getId());
    		orderItem.setOrder_id(order.getOrder_id());
    		orderItem.setTitle(list.get(i).getTitle());
    		orderItem.setPrice(list.get(i).getPrice());
    		orderItem.setNum(list.get(i).getNum());
    		orderItem.setTotal_fee(list.get(i).getTotalMoney());
    		orderItem.setPic_path(list.get(i).getImage());
    		orderItem.setSeller_id(list.get(i).getSellerid());
    		orderItemService.addOrderItem(orderItem);*/
    	}
    	
    	AlipayTradePagePayRequest pagePayRequest =  new AlipayTradePagePayRequest();
        pagePayRequest.setReturnUrl("http://localhost:9001" + "#?enc=" +   request.getParameter("enc") + "&level=" + level);
        pagePayRequest.setNotifyUrl(alipayProperties.getNotifyUrl());
        pagePayRequest.setBizModel(model);

        // 调用SDK生成表单, 并直接将完整的表单html输出到页面
        String form = alipayClient.pageExecute(pagePayRequest).getBody();
        response.setContentType("text/html;charset=" + alipayProperties.getCharset());
        response.getWriter().write(form);
        response.getWriter().flush();
        response.getWriter().close();
    }

    @RequestMapping("/returnUrl")
    public String returnUrl(HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException, AlipayApiException {
        response.setContentType("text/html;charset=" + alipayProperties.getCharset());

        boolean verifyResult = alipayController.rsaCheckV1(request);
        if(verifyResult){
            //验证成功
            //请在这里加上商户的业务逻辑程序代码，如保存支付宝交易号
            //商户订单号
            String out_trade_no = new String(request.getParameter("out_trade_no").getBytes("ISO-8859-1"),"UTF-8");
            //支付宝交易号
            String trade_no = new String(request.getParameter("trade_no").getBytes("ISO-8859-1"),"UTF-8");

            return "pagePaySuccess";

        }else{
            return "pagePayFail";

        }
    }
}
